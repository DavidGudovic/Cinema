<?php

namespace App\Http\Livewire\Admin\Advert;

use App\Http\Livewire\Admin\TableBase;
use App\Services\AdvertService;
use App\Services\ExportService;
use App\Services\RequestableService;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;
use Symfony\Component\HttpFoundation\StreamedResponse;

class Index extends TableBase
{
    //Advert specific filter criteria
    public string $status = 'all';
    public int|string $user_id = 0; // bugfix - |string is needed because input number is a string when empty
    public string $quantity_left = 'any'; //'any', 'done', 'in_progress', 'never_shown'

    protected $listeners = [
        'AdvertStatusChanged' => 'refresh',
    ];

    public function mount()
    {
        $this->sort_by = 'businessRequest.created_at';
        $this->sort_direction = 'DESC';
    }

    public function render(AdvertService $advertService, RequestableService $requestableService)
    {
        $adverts = $this->getAdvertList($advertService, $requestableService);

        if ($this->global_sort == 'false') {
            $this->sortDisplayedAdvertList($adverts, $requestableService);
        }

        return view('livewire.admin.advert.index', [
            'adverts' => $adverts,
        ]);
    }

    /**
     * Returns a paginated, filtered list of adverts or a searched through list of adverts if $this->search_query is set
     */
    public function getAdvertList(AdvertService $advertService, RequestableService $requestableService): LengthAwarePaginator|Collection
    {
        return $advertService->getFilteredAdvertsPaginated(
            requestableService: $requestableService,
            status: $this->status,
            user_id: $this->user_id == '' ? 0 : $this->user_id,
            quantity_left: $this->quantity_left,
            search_query: $this->search_query,
            do_sort: $this->global_sort == 'true',
            sort_by: $this->sort_by,
            sort_direction: $this->sort_direction,
            quantity: $this->quantity,
            );
    }

    /**
     * Sorts the movie list by $this->sort_by and $this->sort_direction
     * Only sorts the collection on the current page, doesn't change the LengthAwarePaginator $adverts
     * If $this->sort_by is a relationship, the relationship is used to sort the collection
     */
    public function sortDisplayedAdvertList(&$adverts, RequestableService $requestableService): void
    {
        $sortParams = $requestableService->resolveSortByParameter($this->sort_by);

        $sorted = $adverts->getCollection()->sortBy(function ($advert) use ($sortParams) {
            return $sortParams['type'] === 'relation'
                ? $advert->businessRequest->{$sortParams['column']}
                : $advert->{$sortParams['column']};
        }, SORT_REGULAR, $this->sort_direction == 'DESC');

        $adverts->setCollection($sorted);
    }



    /**
     * Exports the advert list to a CSV file
     * Returns a StreamedResponse with the CSV file
     * The CSV file is generated by the ExportService
     */
    public function export(ExportService $exportService, AdvertService $advertService, RequestableService $requestableService, string $scope = 'displayed'): StreamedResponse
    {
        $data = ($scope == 'displayed')
        ? $this->getAdvertList($advertService, $requestableService)->values()->toArray()
        : $advertService->getFilteredAdvertsPaginated(requestableService: $requestableService,quantity: 0)->toArray();

        $csv = $exportService->generateCSV($data, $advertService);

        return response()->streamDownload(function () use ($csv) {
            echo $csv;
        }, 'reklame' . now()->format('-d:m:Y') . '.csv');
    }

}



