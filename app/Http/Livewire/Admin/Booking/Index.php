<?php

namespace App\Http\Livewire\Admin\Booking;

use App\Http\Livewire\Admin\TableBase;
use App\Services\BookingService;
use App\Services\ExportService;
use App\Services\RequestableService;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;
use Symfony\Component\HttpFoundation\StreamedResponse;

class Index extends TableBase
{
    //Booking specific filter criteria
    public string $status = 'all';
    public int|string $user_id = 0; // bugfix - |string is needed because input number is a string when empty
    public $status_translations = [
        'CANCELLED' => 'OTKAZANO',
        'PENDING' => 'NA ÄŒEKANJU',
        'ACCEPTED' => 'ODOBRENO',
        'REJECTED' => 'ODBIJENO',
    ];
    protected $listeners = [
        'BusinessStatusChanged' => 'refresh',
    ];

    public function mount()
    {
        $this->sort_by = 'businessRequest.created_at';
        $this->sort_direction = 'DESC';
    }

    public function render(BookingService $bookingService, RequestableService $requestableService)
    {
        $bookings = $this->getBookingList($bookingService);

        if ($this->global_sort == 'false') {
            $this->sortDisplayedBookingList($bookings, $requestableService);
        }

        return view('livewire.admin.booking.index', [
            'bookings' => $bookings,
        ]);
    }

    /**
     * Returns a paginated, filtered list of adverts or a searched through list of adverts if $this->search_query is set
     */
    public function getBookingList(BookingService $bookingService): LengthAwarePaginator|Collection
    {
        return $bookingService->getFilteredBookingsPaginated();
    }

    /**
     * Sorts the movie list by $this->sort_by and $this->sort_direction
     * Only sorts the collection on the current page, doesn't change the LengthAwarePaginator $bookings
     * If $this->sort_by is a relationship, the relationship is used to sort the collection
     */
    public function sortDisplayedBookingList(&$bookings, RequestableService $requestableService): void
    {
        $sortParams = $requestableService->resolveSortByParameter($this->sort_by);

        $sorted = $bookings->getCollection()->sortBy(function ($advert) use ($sortParams) {
            return $sortParams['type'] === 'relation'
                ? $advert->businessRequest->{$sortParams['column']}
                : $advert->{$sortParams['column']};
        }, SORT_REGULAR, $this->sort_direction == 'DESC');

        $bookings->setCollection($sorted);
    }



    /**
     * Exports the advert list to a CSV file
     * Returns a StreamedResponse with the CSV file
     * The CSV file is generated by the ExportService
     */
    public function export(ExportService $exportService, BookingService $bookingService, RequestableService $requestableService, string $scope = 'displayed'): StreamedResponse
    {
        $data = ($scope == 'displayed')
            ? $this->getBookingList($bookingService)->values()->toArray()
            : $bookingService->getFilteredBookingsPaginated()->toArray();

        $csv = $exportService->generateCSV($data, $bookingService);

        return response()->streamDownload(function () use ($csv) {
            echo $csv;
        }, 'reklame' . now()->format('-d:m:Y') . '.csv');
    }

}

