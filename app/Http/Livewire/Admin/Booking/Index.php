<?php

namespace App\Http\Livewire\Admin\Booking;

use App\Http\Livewire\Admin\TableBase;
use App\Services\ExportService;
use App\Services\Resources\BookingService;
use App\Services\Resources\RequestableService;
use App\Traits\WithRelationalSort;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;
use Symfony\Component\HttpFoundation\StreamedResponse;

class Index extends TableBase
{
    use WithRelationalSort;

    public Collection $halls;
    //Booking specific filter criteria
    public int $hall_id = 0;
    public string $status = 'all';
    public int|string $user_id = 0; // bugfix - |string is needed because input number is a string when empty

    protected $listeners = [
        'BusinessStatusChanged' => 'refresh',
    ];

    public function mount()
    {
        $this->sort_by = 'businessRequest.created_at';
        $this->sort_direction = 'DESC';
    }

    public function render(BookingService $bookingService)
    {
        $bookings = $this->getBookingList($bookingService);

        if ($this->global_sort == 'false') {
            $sortParams = $this->resolveSortByParameter($this->sort_by);
            $this->sortDisplayedPaginatorCollection($bookings, $sortParams);
        }

        return view('livewire.admin.booking.index', [
            'bookings' => $bookings,
        ]);
    }

    /**
     * Returns a paginated, filtered list of adverts or a searched through list of adverts if $this->search_query is set
     */
    public function getBookingList(BookingService $bookingService): LengthAwarePaginator|Collection
    {
        return $bookingService->getFilteredBookingsPaginated(
            status: $this->status,
            search_query: $this->search_query,
            do_sort: $this->global_sort == 'true',
            sort_by: $this->sort_by,
            sort_direction: $this->sort_direction,
            halls: $this->hall_id == 0 ? $this->halls->pluck('id')->toArray() : [$this->hall_id],
            user_id: $this->user_id == '' ? 0 : $this->user_id,
            quantity: $this->quantity,
        );
    }

    /**
     * Exports the advert list to a CSV file
     * Returns a StreamedResponse with the CSV file
     * The CSV file is generated by the ExportService
     */
    public function export(ExportService $exportService, BookingService $bookingService, string $scope = 'displayed'): StreamedResponse
    {
        $data = ($scope == 'displayed')
            ? $this->getBookingList($bookingService)->values()->toArray()
            : $bookingService->getFilteredBookingsPaginated()->toArray();

        $csv = $exportService->generateCSV($data, $bookingService);

        return response()->streamDownload(function () use ($csv) {
            echo $csv;
        }, 'rentiranja' . now()->format('-d:m:Y') . '.csv');
    }

}

